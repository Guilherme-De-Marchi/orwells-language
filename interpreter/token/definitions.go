package token

const (
	// Ids
	STRING_LITERAL = iota + 1
	INTEGER_LITERAL
	FLOATING_LITERAL

	IF
	ENDIF
	VAR
	EXEC

	EQUAL
	SUM
	SUBTRACTION

	LEFT_PARENTESIS
	RIGHT_PARENTESIS
	INSTRUCTION_DELIMITER
	ASSIGNMENT

	IDENTIFIER
	GENERAL

	// Keywords
	IF_KEYWORD    = "if"
	ENDIF_KEYWORD = "endif"
	VAR_KEYWORD   = "var"
	EXEC_KEYWORD  = "exec"

	EQUAL_SIGN       = "=="
	SUM_SIGN         = "+"
	SUBTRACTION_SIGN = "-"

	ASSIGNMENT_SIGN   = "="
	IDENTIFIER_PREFIX = "$"

	LEFT_PARENTESIS_SYMBOL  = "("
	RIGHT_PARENTESIS_SYMBOL = ")"
	INSTRUCTION_SYMBOL      = ";"
)

var (
	// TOKENS WITH PREDETERMINED VALUES
	IF_TOKEN    = &Token{Id: IF, Value: IF_KEYWORD}
	ENDIF_TOKEN = &Token{Id: ENDIF, Value: ENDIF_KEYWORD}
	VAR_TOKEN   = &Token{Id: VAR, Value: VAR_KEYWORD}
	EXEC_TOKEN  = &Token{Id: EXEC, Value: EXEC_KEYWORD}

	LEFT_PARENTESIS_TOKEN       = &Token{Id: LEFT_PARENTESIS, Value: LEFT_PARENTESIS_SYMBOL}
	RIGHT_PARENTESIS_TOKEN      = &Token{Id: RIGHT_PARENTESIS, Value: RIGHT_PARENTESIS_SYMBOL}
	INSTRUCTION_DELIMITER_TOKEN = &Token{Id: INSTRUCTION_DELIMITER, Value: INSTRUCTION_DELIMITER}

	ASSIGNMENT_TOKEN  = &Token{Id: ASSIGNMENT, Value: ASSIGNMENT_SIGN}
	EQUAL_TOKEN       = &Token{Id: EQUAL, Value: EQUAL_SIGN}
	SUM_TOKEN         = &Token{Id: SUM, Value: SUM_SIGN}
	SUBTRACTION_TOKEN = &Token{Id: SUBTRACTION, Value: SUBTRACTION_SIGN}

	// TOKENS WITH NOT PREDETERMINED VALUES
	STRING_LITERAL_TOKEN   = &Token{Id: STRING_LITERAL}
	INTEGER_LITERAL_TOKEN  = &Token{Id: INTEGER_LITERAL}
	FLOATING_LITERAL_TOKEN = &Token{Id: FLOATING_LITERAL}

	IDENTIFIER_TOKEN = &Token{Id: IDENTIFIER}
	GENERAL_TOKEN    = &Token{Id: GENERAL}

	IdMap = map[int]*Token{
		STRING_LITERAL:   STRING_LITERAL_TOKEN,
		INTEGER_LITERAL:  INTEGER_LITERAL_TOKEN,
		FLOATING_LITERAL: FLOATING_LITERAL_TOKEN,

		IF:    IF_TOKEN,
		ENDIF: ENDIF_TOKEN,
		VAR:   VAR_TOKEN,
		EXEC:  EXEC_TOKEN,

		LEFT_PARENTESIS:       LEFT_PARENTESIS_TOKEN,
		RIGHT_PARENTESIS:      RIGHT_PARENTESIS_TOKEN,
		INSTRUCTION_DELIMITER: INSTRUCTION_DELIMITER_TOKEN,

		ASSIGNMENT:  ASSIGNMENT_TOKEN,
		EQUAL:       EQUAL_TOKEN,
		SUM:         SUM_TOKEN,
		SUBTRACTION: SUBTRACTION_TOKEN,

		IDENTIFIER: IDENTIFIER_TOKEN,
		GENERAL:    GENERAL_TOKEN,
	}

	KeywordMap = map[string]*Token{
		IF_KEYWORD:    IF_TOKEN,
		ENDIF_KEYWORD: ENDIF_TOKEN,
		VAR_KEYWORD:   VAR_TOKEN,
		EXEC_KEYWORD:  EXEC_TOKEN,

		LEFT_PARENTESIS_SYMBOL:  LEFT_PARENTESIS_TOKEN,
		RIGHT_PARENTESIS_SYMBOL: RIGHT_PARENTESIS_TOKEN,
		INSTRUCTION_SYMBOL:      INSTRUCTION_DELIMITER_TOKEN,

		ASSIGNMENT_SIGN:  ASSIGNMENT_TOKEN,
		EQUAL_SIGN:       EQUAL_TOKEN,
		SUM_SIGN:         SUM_TOKEN,
		SUBTRACTION_SIGN: SUBTRACTION_TOKEN,
	}
)
